{
  "openapi": "3.0.1",
  "info": {
    "title": "Discord User API",
    "version": "1.0.0",
    "description": "API documentation for Discord's User endpoints."
  },
  "servers": [
    {
      "url": "https://discord.com/api/v10",
      "description": "Discord API Base URL"
    }
  ],
  "paths": {
    "/users/@me": {
      "get": {
        "summary": "Get Current User",
        "description": "Retrieve information about the current user.",
        "tags": ["User"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User information retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {"type": "string", "description": "Unique user ID."},
                    "username": {"type": "string", "description": "The user's display name."},
                    "discriminator": {"type": "string", "description": "The user's 4-digit Discord tag."},
                    "avatar": {"type": "string", "nullable": true, "description": "Hash of the user's avatar."},
                    "verified": {"type": "boolean", "description": "Whether the user's email is verified."},
                    "email": {"type": "string", "nullable": true, "description": "The user's email address."},
                    "flags": {"type": "integer", "description": "User flags."},
                    "premium_type": {"type": "integer", "nullable": true, "description": "Type of Nitro subscription."},
                    "public_flags": {"type": "integer", "description": "Public user flags."}
                  },
                  "example": {
                    "id": "123456789012345678",
                    "username": "ExampleUser",
                    "discriminator": "1234",
                    "avatar": "avatar_hash",
                    "verified": true,
                    "email": "user@example.com",
                    "flags": 64,
                    "premium_type": 2,
                    "public_flags": 64
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/{user.id}": {
      "get": {
        "summary": "Get User",
        "description": "Fetch a user object for a specified user ID.",
        "tags": ["User"],
        "parameters": [
          {
            "name": "user.id",
            "in": "path",
            "required": true,
            "schema": {"type": "string"},
            "description": "The user's unique ID."
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {"type": "string", "description": "Unique user ID."},
                    "username": {"type": "string", "description": "The user's display name."},
                    "discriminator": {"type": "string", "description": "The user's 4-digit Discord tag."},
                    "avatar": {"type": "string", "nullable": true, "description": "Hash of the user's avatar."}
                  },
                  "example": {
                    "id": "123456789012345678",
                    "username": "ExampleUser",
                    "discriminator": "1234",
                    "avatar": "avatar_hash"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/@me": {
      "patch": {
        "summary": "Modify Current User",
        "description": "Modify the current user's account settings.",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {"type": "string", "description": "The new username."},
                  "avatar": {"type": "string", "nullable": true, "description": "Base64 encoded avatar image."}
                },
                "example": {
                  "username": "NewUsername",
                  "avatar": "data:image/png;base64,<BASE64_IMAGE_DATA>"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User information updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {"type": "string", "description": "Unique user ID."},
                    "username": {"type": "string", "description": "The user's display name."},
                    "discriminator": {"type": "string", "description": "The user's 4-digit Discord tag."},
                    "avatar": {"type": "string", "nullable": true, "description": "Hash of the user's avatar."}
                  },
                  "example": {
                    "id": "123456789012345678",
                    "username": "NewUsername",
                    "discriminator": "1234",
                    "avatar": "new_avatar_hash"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/@me/guilds": {
      "get": {
        "summary": "Get Current User Guilds",
        "description": "Retrieve a list of guilds the current user is a member of.",
        "tags": ["User"],
        "parameters": [
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {"type": "string"},
            "description": "Get guilds before this ID."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {"type": "string"},
            "description": "Get guilds after this ID."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {"type": "integer", "default": 100, "maximum": 200},
            "description": "Number of guilds to return (default: 100, max: 200)."
          }
        ],
        "responses": {
          "200": {
            "description": "List of guilds retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {"type": "string", "description": "Guild ID."},
                      "name": {"type": "string", "description": "Guild name."},
                      "icon": {"type": "string", "nullable": true, "description": "Guild icon hash."},
                      "owner": {"type": "boolean", "description": "Whether the user owns the guild."},
                      "permissions": {"type": "string", "description": "User permissions in the guild."},
                      "features": {"type": "array", "items": {"type": "string"}, "description": "List of guild features."}
                    },
                    "example": {
                      "id": "123456789012345678",
                      "name": "GuildName",
                      "icon": "icon_hash",
                      "owner": true,
                      "permissions": "2147483647",
                      "features": ["INVITE_SPLASH"]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
